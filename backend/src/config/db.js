import { Pool } from "pg";
import dotenv from "dotenv";
dotenv.config();

// Validate database connection string
const connectionString = process.env.PSQLDB_CONNECTIONSTRING;

// Check if connection string is placeholder or invalid
const isPlaceholder = !connectionString || 
  connectionString === "postgresql://user:password@host:port/database" ||
  connectionString.includes("user:password") ||
  connectionString.includes("host:port");

if (isPlaceholder) {
  console.error("");
  console.error("‚ùå ==========================================");
  console.error("‚ùå DATABASE CONNECTION STRING CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH!");
  console.error("‚ùå ==========================================");
  console.error("");
  console.error("üìù Vui l√≤ng c·∫≠p nh·∫≠t PSQLDB_CONNECTIONSTRING trong file backend/.env");
  console.error("");
  console.error("üí° C√ÅCH L·∫§Y CONNECTION STRING:");
  console.error("");
  console.error("N·∫øu d√πng Neon (Khuy·∫øn ngh·ªã):");
  console.error("   1. Truy c·∫≠p: https://console.neon.tech");
  console.error("   2. ƒêƒÉng nh·∫≠p v√† ch·ªçn project");
  console.error("   3. Copy Connection String");
  console.error("   4. Paste v√†o backend/.env");
  console.error("");
  console.error("N·∫øu d√πng PostgreSQL local:");
  console.error("   Format: postgresql://postgres:password@localhost:5432/database_name");
  console.error("");
  console.error("‚ö†Ô∏è  Backend v·∫´n ch·∫°y nh∆∞ng KH√îNG TH·ªÇ k·∫øt n·ªëi database!");
  console.error("");
}

// T·∫°o pool ngay c·∫£ khi connection string ch∆∞a ƒë√∫ng ƒë·ªÉ tr√°nh crash
// L·ªói s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü query level
const pool = new Pool({
  connectionString: connectionString || "postgresql://invalid",
  // Connection pool settings
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 5000,
  allowExitOnIdle: true,
});

// Event handlers
pool.on("connect", (client) => {
  console.log("‚úÖ Database connection established");
});

pool.on("error", (err, client) => {
  console.error("‚ùå Database pool error:", err.message);
  
  // Provide helpful error messages
  if (err.code === "ECONNREFUSED") {
    console.error("‚ö†Ô∏è  Kh√¥ng th·ªÉ k·∫øt n·ªëi database server. Ki·ªÉm tra:");
    console.error("   1. PSQLDB_CONNECTIONSTRING ƒë√∫ng ch∆∞a?");
    console.error("   2. Database server c√≥ ƒëang ch·∫°y kh√¥ng?");
    console.error("   3. Host/Port c√≥ ƒë√∫ng kh√¥ng?");
  } else if (err.code === "28P01" || err.message.includes("password")) {
    console.error("‚ö†Ô∏è  L·ªói x√°c th·ª±c. Ki·ªÉm tra:");
    console.error("   1. Username/password trong connection string ƒë√∫ng ch∆∞a?");
  } else if (err.code === "3D000" || err.message.includes("does not exist")) {
    console.error("‚ö†Ô∏è  Database kh√¥ng t·ªìn t·∫°i. Ki·ªÉm tra:");
    console.error("   1. T√™n database trong connection string ƒë√∫ng ch∆∞a?");
  } else if (isPlaceholder) {
    console.error("‚ö†Ô∏è  Connection string ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!");
  }
});

// Test connection on startup (async, kh√¥ng block)
if (!isPlaceholder) {
  pool.query("SELECT NOW() as test")
    .then(() => {
      console.log("‚úÖ Database connection test: SUCCESS");
    })
    .catch((err) => {
      console.error("‚ùå Database connection test: FAILED");
      console.error("   Error:", err.message);
      if (!err.message.includes("invalid")) {
        console.error("üí° Ki·ªÉm tra l·∫°i PSQLDB_CONNECTIONSTRING trong .env");
      }
    });
} else {
  console.error("‚ö†Ô∏è  B·ªè qua connection test v√¨ connection string ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh");
}

export default pool;
